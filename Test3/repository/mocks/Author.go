// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "test3/model"

	mock "github.com/stretchr/testify/mock"
)

// Author is an autogenerated mock type for the Author type
type Author struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, author
func (_m *Author) Add(ctx context.Context, author model.Author) (*model.Author, error) {
	ret := _m.Called(ctx, author)

	var r0 *model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Author) (*model.Author, error)); ok {
		return rf(ctx, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Author) *model.Author); ok {
		r0 = rf(ctx, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Author) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, authorID
func (_m *Author) Delete(ctx context.Context, authorID string) error {
	ret := _m.Called(ctx, authorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, authorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, authorID
func (_m *Author) Get(ctx context.Context, authorID string) (*model.Author, error) {
	ret := _m.Called(ctx, authorID)

	var r0 *model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Author, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Author); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, authorID, notification
func (_m *Author) Update(ctx context.Context, authorID string, notification model.Author) (*model.Author, error) {
	ret := _m.Called(ctx, authorID, notification)

	var r0 *model.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Author) (*model.Author, error)); ok {
		return rf(ctx, authorID, notification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Author) *model.Author); ok {
		r0 = rf(ctx, authorID, notification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Author) error); ok {
		r1 = rf(ctx, authorID, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthor interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthor creates a new instance of Author. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthor(t mockConstructorTestingTNewAuthor) *Author {
	mock := &Author{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
