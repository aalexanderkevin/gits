// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "test3/model"

	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, publiser
func (_m *Publisher) Add(ctx context.Context, publiser model.Publisher) (*model.Publisher, error) {
	ret := _m.Called(ctx, publiser)

	var r0 *model.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Publisher) (*model.Publisher, error)); ok {
		return rf(ctx, publiser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Publisher) *model.Publisher); ok {
		r0 = rf(ctx, publiser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Publisher) error); ok {
		r1 = rf(ctx, publiser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, publisherID
func (_m *Publisher) Delete(ctx context.Context, publisherID string) error {
	ret := _m.Called(ctx, publisherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, publisherID
func (_m *Publisher) Get(ctx context.Context, publisherID string) (*model.Publisher, error) {
	ret := _m.Called(ctx, publisherID)

	var r0 *model.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Publisher, error)); ok {
		return rf(ctx, publisherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Publisher); ok {
		r0 = rf(ctx, publisherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publisherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, publisherID, notification
func (_m *Publisher) Update(ctx context.Context, publisherID string, notification model.Publisher) (*model.Publisher, error) {
	ret := _m.Called(ctx, publisherID, notification)

	var r0 *model.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Publisher) (*model.Publisher, error)); ok {
		return rf(ctx, publisherID, notification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Publisher) *model.Publisher); ok {
		r0 = rf(ctx, publisherID, notification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Publisher) error); ok {
		r1 = rf(ctx, publisherID, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisher(t mockConstructorTestingTNewPublisher) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
