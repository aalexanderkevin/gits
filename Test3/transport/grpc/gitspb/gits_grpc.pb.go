// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: transport/grpc/gitspb/gits.proto

package gitspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gits_BookGet_FullMethodName         = "/gits.Gits/BookGet"
	Gits_BookAdd_FullMethodName         = "/gits.Gits/BookAdd"
	Gits_BookUpdate_FullMethodName      = "/gits.Gits/BookUpdate"
	Gits_BookDelete_FullMethodName      = "/gits.Gits/BookDelete"
	Gits_AuthorGet_FullMethodName       = "/gits.Gits/AuthorGet"
	Gits_AuthorAdd_FullMethodName       = "/gits.Gits/AuthorAdd"
	Gits_AuthorUpdate_FullMethodName    = "/gits.Gits/AuthorUpdate"
	Gits_AuthorDelete_FullMethodName    = "/gits.Gits/AuthorDelete"
	Gits_PublisherGet_FullMethodName    = "/gits.Gits/PublisherGet"
	Gits_PublisherAdd_FullMethodName    = "/gits.Gits/PublisherAdd"
	Gits_PublisherUpdate_FullMethodName = "/gits.Gits/PublisherUpdate"
	Gits_PublisherDelete_FullMethodName = "/gits.Gits/PublisherDelete"
)

// GitsClient is the client API for Gits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitsClient interface {
	BookGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error)
	BookAdd(ctx context.Context, in *BookAddRequest, opts ...grpc.CallOption) (*BookAddResponse, error)
	BookUpdate(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error)
	BookDelete(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error)
	AuthorGet(ctx context.Context, in *AuthorGetRequest, opts ...grpc.CallOption) (*AuthorGetResponse, error)
	AuthorAdd(ctx context.Context, in *AuthorAddRequest, opts ...grpc.CallOption) (*AuthorAddResponse, error)
	AuthorUpdate(ctx context.Context, in *AuthorUpdateRequest, opts ...grpc.CallOption) (*AuthorUpdateResponse, error)
	AuthorDelete(ctx context.Context, in *AuthorDeleteRequest, opts ...grpc.CallOption) (*AuthorDeleteResponse, error)
	PublisherGet(ctx context.Context, in *PublisherGetRequest, opts ...grpc.CallOption) (*PublisherGetResponse, error)
	PublisherAdd(ctx context.Context, in *PublisherAddRequest, opts ...grpc.CallOption) (*PublisherAddResponse, error)
	PublisherUpdate(ctx context.Context, in *PublisherUpdateRequest, opts ...grpc.CallOption) (*PublisherUpdateResponse, error)
	PublisherDelete(ctx context.Context, in *PublisherDeleteRequest, opts ...grpc.CallOption) (*PublisherDeleteResponse, error)
}

type gitsClient struct {
	cc grpc.ClientConnInterface
}

func NewGitsClient(cc grpc.ClientConnInterface) GitsClient {
	return &gitsClient{cc}
}

func (c *gitsClient) BookGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error) {
	out := new(BookGetResponse)
	err := c.cc.Invoke(ctx, Gits_BookGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) BookAdd(ctx context.Context, in *BookAddRequest, opts ...grpc.CallOption) (*BookAddResponse, error) {
	out := new(BookAddResponse)
	err := c.cc.Invoke(ctx, Gits_BookAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) BookUpdate(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error) {
	out := new(BookUpdateResponse)
	err := c.cc.Invoke(ctx, Gits_BookUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) BookDelete(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error) {
	out := new(BookDeleteResponse)
	err := c.cc.Invoke(ctx, Gits_BookDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) AuthorGet(ctx context.Context, in *AuthorGetRequest, opts ...grpc.CallOption) (*AuthorGetResponse, error) {
	out := new(AuthorGetResponse)
	err := c.cc.Invoke(ctx, Gits_AuthorGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) AuthorAdd(ctx context.Context, in *AuthorAddRequest, opts ...grpc.CallOption) (*AuthorAddResponse, error) {
	out := new(AuthorAddResponse)
	err := c.cc.Invoke(ctx, Gits_AuthorAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) AuthorUpdate(ctx context.Context, in *AuthorUpdateRequest, opts ...grpc.CallOption) (*AuthorUpdateResponse, error) {
	out := new(AuthorUpdateResponse)
	err := c.cc.Invoke(ctx, Gits_AuthorUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) AuthorDelete(ctx context.Context, in *AuthorDeleteRequest, opts ...grpc.CallOption) (*AuthorDeleteResponse, error) {
	out := new(AuthorDeleteResponse)
	err := c.cc.Invoke(ctx, Gits_AuthorDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) PublisherGet(ctx context.Context, in *PublisherGetRequest, opts ...grpc.CallOption) (*PublisherGetResponse, error) {
	out := new(PublisherGetResponse)
	err := c.cc.Invoke(ctx, Gits_PublisherGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) PublisherAdd(ctx context.Context, in *PublisherAddRequest, opts ...grpc.CallOption) (*PublisherAddResponse, error) {
	out := new(PublisherAddResponse)
	err := c.cc.Invoke(ctx, Gits_PublisherAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) PublisherUpdate(ctx context.Context, in *PublisherUpdateRequest, opts ...grpc.CallOption) (*PublisherUpdateResponse, error) {
	out := new(PublisherUpdateResponse)
	err := c.cc.Invoke(ctx, Gits_PublisherUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) PublisherDelete(ctx context.Context, in *PublisherDeleteRequest, opts ...grpc.CallOption) (*PublisherDeleteResponse, error) {
	out := new(PublisherDeleteResponse)
	err := c.cc.Invoke(ctx, Gits_PublisherDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitsServer is the server API for Gits service.
// All implementations must embed UnimplementedGitsServer
// for forward compatibility
type GitsServer interface {
	BookGet(context.Context, *BookGetRequest) (*BookGetResponse, error)
	BookAdd(context.Context, *BookAddRequest) (*BookAddResponse, error)
	BookUpdate(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error)
	BookDelete(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error)
	AuthorGet(context.Context, *AuthorGetRequest) (*AuthorGetResponse, error)
	AuthorAdd(context.Context, *AuthorAddRequest) (*AuthorAddResponse, error)
	AuthorUpdate(context.Context, *AuthorUpdateRequest) (*AuthorUpdateResponse, error)
	AuthorDelete(context.Context, *AuthorDeleteRequest) (*AuthorDeleteResponse, error)
	PublisherGet(context.Context, *PublisherGetRequest) (*PublisherGetResponse, error)
	PublisherAdd(context.Context, *PublisherAddRequest) (*PublisherAddResponse, error)
	PublisherUpdate(context.Context, *PublisherUpdateRequest) (*PublisherUpdateResponse, error)
	PublisherDelete(context.Context, *PublisherDeleteRequest) (*PublisherDeleteResponse, error)
	mustEmbedUnimplementedGitsServer()
}

// UnimplementedGitsServer must be embedded to have forward compatible implementations.
type UnimplementedGitsServer struct {
}

func (UnimplementedGitsServer) BookGet(context.Context, *BookGetRequest) (*BookGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookGet not implemented")
}
func (UnimplementedGitsServer) BookAdd(context.Context, *BookAddRequest) (*BookAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookAdd not implemented")
}
func (UnimplementedGitsServer) BookUpdate(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookUpdate not implemented")
}
func (UnimplementedGitsServer) BookDelete(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookDelete not implemented")
}
func (UnimplementedGitsServer) AuthorGet(context.Context, *AuthorGetRequest) (*AuthorGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorGet not implemented")
}
func (UnimplementedGitsServer) AuthorAdd(context.Context, *AuthorAddRequest) (*AuthorAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorAdd not implemented")
}
func (UnimplementedGitsServer) AuthorUpdate(context.Context, *AuthorUpdateRequest) (*AuthorUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorUpdate not implemented")
}
func (UnimplementedGitsServer) AuthorDelete(context.Context, *AuthorDeleteRequest) (*AuthorDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorDelete not implemented")
}
func (UnimplementedGitsServer) PublisherGet(context.Context, *PublisherGetRequest) (*PublisherGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherGet not implemented")
}
func (UnimplementedGitsServer) PublisherAdd(context.Context, *PublisherAddRequest) (*PublisherAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherAdd not implemented")
}
func (UnimplementedGitsServer) PublisherUpdate(context.Context, *PublisherUpdateRequest) (*PublisherUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherUpdate not implemented")
}
func (UnimplementedGitsServer) PublisherDelete(context.Context, *PublisherDeleteRequest) (*PublisherDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherDelete not implemented")
}
func (UnimplementedGitsServer) mustEmbedUnimplementedGitsServer() {}

// UnsafeGitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitsServer will
// result in compilation errors.
type UnsafeGitsServer interface {
	mustEmbedUnimplementedGitsServer()
}

func RegisterGitsServer(s grpc.ServiceRegistrar, srv GitsServer) {
	s.RegisterService(&Gits_ServiceDesc, srv)
}

func _Gits_BookGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).BookGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_BookGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).BookGet(ctx, req.(*BookGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_BookAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).BookAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_BookAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).BookAdd(ctx, req.(*BookAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_BookUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).BookUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_BookUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).BookUpdate(ctx, req.(*BookUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_BookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).BookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_BookDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).BookDelete(ctx, req.(*BookDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_AuthorGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).AuthorGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_AuthorGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).AuthorGet(ctx, req.(*AuthorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_AuthorAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).AuthorAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_AuthorAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).AuthorAdd(ctx, req.(*AuthorAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_AuthorUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).AuthorUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_AuthorUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).AuthorUpdate(ctx, req.(*AuthorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_AuthorDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).AuthorDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_AuthorDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).AuthorDelete(ctx, req.(*AuthorDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_PublisherGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).PublisherGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_PublisherGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).PublisherGet(ctx, req.(*PublisherGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_PublisherAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).PublisherAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_PublisherAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).PublisherAdd(ctx, req.(*PublisherAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_PublisherUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).PublisherUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_PublisherUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).PublisherUpdate(ctx, req.(*PublisherUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_PublisherDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).PublisherDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gits_PublisherDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).PublisherDelete(ctx, req.(*PublisherDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gits_ServiceDesc is the grpc.ServiceDesc for Gits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gits.Gits",
	HandlerType: (*GitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookGet",
			Handler:    _Gits_BookGet_Handler,
		},
		{
			MethodName: "BookAdd",
			Handler:    _Gits_BookAdd_Handler,
		},
		{
			MethodName: "BookUpdate",
			Handler:    _Gits_BookUpdate_Handler,
		},
		{
			MethodName: "BookDelete",
			Handler:    _Gits_BookDelete_Handler,
		},
		{
			MethodName: "AuthorGet",
			Handler:    _Gits_AuthorGet_Handler,
		},
		{
			MethodName: "AuthorAdd",
			Handler:    _Gits_AuthorAdd_Handler,
		},
		{
			MethodName: "AuthorUpdate",
			Handler:    _Gits_AuthorUpdate_Handler,
		},
		{
			MethodName: "AuthorDelete",
			Handler:    _Gits_AuthorDelete_Handler,
		},
		{
			MethodName: "PublisherGet",
			Handler:    _Gits_PublisherGet_Handler,
		},
		{
			MethodName: "PublisherAdd",
			Handler:    _Gits_PublisherAdd_Handler,
		},
		{
			MethodName: "PublisherUpdate",
			Handler:    _Gits_PublisherUpdate_Handler,
		},
		{
			MethodName: "PublisherDelete",
			Handler:    _Gits_PublisherDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/gitspb/gits.proto",
}
